{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/app/src/ModelAnalysis.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CodeGrid from './CodeGrid.js';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '90%'\n  },\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  backButton: {\n    marginRight: theme.spacing(1)\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  },\n  button: {\n    margin: 20\n  },\n  instructions: {\n    margin: 20\n  }\n}));\n\nfunction getSteps() {\n  return ['Code input', 'Entity Selection', 'Analysis'];\n}\n\nfunction Upload(props) {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    accept: \".f90\",\n    className: classes.input,\n    id: \"outlined-button-file\",\n    multiple: true,\n    type: \"file\",\n    onChange: props.handleUpload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"outlined-button-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\",\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Upload\")), React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"p\",\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.filename), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: props.handleNext,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Analyze\"));\n}\n\nexport default function ModelAnalysis() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const steps = getSteps();\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        fileName = _React$useState4[0],\n        setFilename = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        fileContent = _React$useState6[0],\n        setFileContent = _React$useState6[1];\n\n  const _React$useState7 = React.useState([]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        results = _React$useState8[0],\n        setResults = _React$useState8[1];\n\n  function handleUpload(target) {\n    var myFile = target.target.files[0];\n    var reader = new FileReader();\n    reader.readAsText(myFile);\n\n    reader.onload = function () {\n      setFilename(myFile.name);\n      setFileContent(reader.result);\n    };\n  }\n\n  function getStepContent(stepIndex) {\n    switch (stepIndex) {\n      case 0:\n        return React.createElement(Upload, {\n          handleUpload: handleUpload,\n          filename: fileName,\n          handleNext: handleNext,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n\n      case 1:\n        return React.createElement(CodeGrid, {\n          data: results,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n      //(<div><SyntaxHighlighter language='fortran' styles={{margin: 20}}>{fileContent}</SyntaxHighlighter></div>);\n\n      case 2:\n        return 'This is the bit I really care about!';\n\n      default:\n        return 'Uknown stepIndex';\n    }\n  }\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => {\n      if (prevActiveStep == 0) {\n        fetch('http://localhost:5001/analyze', {\n          method: 'post',\n          headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Request-Method': 'POST'\n          },\n          body: JSON.stringify({\n            file: fileContent\n          })\n        }).then(resp => resp.json()).then(resp => {\n          setResults(resp.results);\n          console.log(resp.results);\n        });\n      }\n\n      return prevActiveStep + 1;\n    });\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    activeStep: activeStep,\n    alternativeLabel: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, steps.map(label => React.createElement(Step, {\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(StepLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, label)))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, activeStep === steps.length ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"All steps completed\"), React.createElement(Button, {\n    onClick: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Reset\")) : React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, getStepContent(activeStep))));\n}","map":{"version":3,"sources":["/app/src/ModelAnalysis.js"],"names":["React","makeStyles","Stepper","Step","StepLabel","Button","Typography","CodeGrid","useStyles","theme","root","width","container","display","alignItems","justifyContent","backButton","marginRight","spacing","instructions","marginTop","marginBottom","input","button","margin","getSteps","Upload","props","classes","handleUpload","filename","handleNext","ModelAnalysis","useState","activeStep","setActiveStep","steps","fileName","setFilename","fileContent","setFileContent","results","setResults","target","myFile","files","reader","FileReader","readAsText","onload","name","result","getStepContent","stepIndex","prevActiveStep","fetch","method","headers","body","JSON","stringify","file","then","resp","json","console","log","handleBack","handleReset","map","label","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CodeGrid from './CodeGrid.js'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '90%',\n  },\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n  button: {\n    margin: 20,\n  },\n  instructions: {\n    margin: 20,\n  },\n\n}));\n\nfunction getSteps() {\n  return ['Code input', 'Entity Selection', 'Analysis'];\n}\n\n\nfunction Upload(props){\n  const classes = useStyles();\n  return (<div><input\n            accept=\".f90\"\n            className={classes.input}\n            id=\"outlined-button-file\"\n            multiple\n            type=\"file\"\n            onChange={props.handleUpload}\n          />\n          <label htmlFor=\"outlined-button-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\" className={classes.button}>\n              Upload\n            </Button>\n          </label>\n          <Typography variant=\"h5\" component=\"p\" className={classes.button}>{props.filename}</Typography>\n          <Button variant=\"contained\" color=\"primary\" onClick={props.handleNext} className={classes.button}>\n            Analyze\n          </Button></div>\n        );\n}\n\n\nexport default function ModelAnalysis() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n  const [fileName, setFilename] = React.useState('')\n  const [fileContent, setFileContent] = React.useState('')\n  const [results, setResults] = React.useState([])\n\n  function handleUpload(target){\n    var myFile = target.target.files[0];\n    var reader = new FileReader();\n    reader.readAsText(myFile);\n    reader.onload=function(){\n      setFilename(myFile.name)\n      setFileContent(reader.result)\n    }\n  }\n\n  function getStepContent(stepIndex) {\n    switch (stepIndex) {\n      case 0:\n        return (<Upload handleUpload={handleUpload} filename={fileName} handleNext={handleNext}></Upload>)\n      case 1:\n        return (<CodeGrid data={results}></CodeGrid>)//(<div><SyntaxHighlighter language='fortran' styles={{margin: 20}}>{fileContent}</SyntaxHighlighter></div>);\n      case 2:\n        return 'This is the bit I really care about!';\n      default:\n        return 'Uknown stepIndex';\n    }\n  }\n  function handleNext() {\n    setActiveStep(prevActiveStep => {\n      if (prevActiveStep == 0){\n        fetch('http://localhost:5001/analyze', {\n          method: 'post',\n          headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Request-Method': 'POST'\n          },\n          body: JSON.stringify({file: fileContent})\n        }).then(resp => resp.json())\n          .then(resp => {\n            setResults(resp.results)\n            console.log(resp.results)\n          })\n      }\n      return prevActiveStep + 1\n    });\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} alternativeLabel>\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>All steps completed</Typography>\n            <Button onClick={handleReset}>Reset</Button>\n          </div>\n        ) : (\n          <div className={classes.container}>\n            {getStepContent(activeStep)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}